input {
  file {
    path => ["/data/postgres.log"]
    type => "postgres"
  }
}

filter {
 grok {
   match => [
     "message" , "%{SYSLOGTIMESTAMP:date} %{DATA:server} %{DATA:process}: \[%{INT:line}-%{INT:part_of_line}\] %{TIMESTAMP_ISO8601:timestamp} %{DATA:timezone} %{NUMBER:pid} %{DATA:user}@%{DATA:db} %{IPV4}\(%{NUMBER:tid}\)  LOG:  duration: %{NUMBER:duration} ms  execute \<unnamed\>: %{GREEDYDATA:query}",
     "message" , "%{SYSLOGTIMESTAMP:date} %{DATA:server} %{DATA:process}: \[%{INT:line}-%{INT:part_of_line}\] %{TIMESTAMP_ISO8601:timestamp} %{DATA:timezone} %{NUMBER:pid} %{DATA:user}@%{DATA:db} %{IPV4}\(%{NUMBER:tid}\)  DETAIL: %{GREEDYDATA:parameters}",
     "message" , "%{SYSLOGTIMESTAMP:date} %{DATA:server} %{DATA:process}: \[%{INT:line}-%{INT:part_of_line}\] %{GREEDYDATA:query}"
    ]
   overwrite => [ "message" ]
 }
 mutate {
   convert => ["duration", "float"]
 }
 aggregate {
  task_id => "%{process}%{line}"
  code =>  "
    map['query'] ||= '';
    if (event.get('duration') != nil)
      map['duration'] = event.get('duration');
    end
    if (event.get('query') != nil && map['parameters_section_started'] == nil)
      map['query'] += event.get('query');
    end
    if (event.get('db') != nil)
      map['db'] = event.get('db')
    end
    map['parameters'] ||= '';
    if (event.get('parameters') != nil)
      map['parameters'] += event.get('parameters');
      map['parameters_section_started'] = true;
    end
    if (event.get('query') != nil && map['parameters_section_started'] == true)
      map['parameters'] += event.get('query');
    end
    if (event.get('timestamp') != nil && map['timestamp'] == nil)
      map['timestamp'] = event.get('timestamp');
    end
  "
  push_previous_map_as_event => true
  timeout_code => "event.tag('aggregated')"
 }
 if "aggregated" not in [tags] {
     drop {}
 }
 date {
   match => [ "timestamp" , "yyyy-MM-dd HH:mm:ss.SSS" ]
   remove_field => [ "timestamp" ]
 }
}

output {
 elasticsearch {
   hosts => ["http://elasticsearch:9200"]
   index => "postgres"
   document_type => "postgres_logs"
   user     => "elastic"
   password => "changeme"
 }
 stdout { codec => rubydebug }
}